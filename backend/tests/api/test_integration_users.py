import pytest
from fastapi import status
from src.schemas import User
from src.services.auth import Hash
from tests.api.conftest import TestingSessionLocal


@pytest.mark.asyncio
async def test_get_current_user(client, get_token, mock_redis_client):
    """
    Test retrieving the current authenticated user's details.
    """
    headers = {"Authorization": f"Bearer {get_token}"}
    response = client.get("/api/users/me", headers=headers)
    assert response.status_code == 200, response.text
    data = response.json()
    assert "username" in data
    assert "email" in data
    assert data["username"] == "deadpool"
    assert data["email"] == "deadpool@example.com"


@pytest.mark.asyncio
async def test_rate_limit(client, get_token):
    # –í–∏–∫–æ–Ω–∞–Ω–Ω—è –±—ñ–ª—å—à–µ 10 –∑–∞–ø–∏—Ç—ñ–≤
    for _ in range(10):
        response = client.get(
            "/api/users/me", headers={"Authorization": f"Bearer {get_token}"}
        )
        assert response.status_code == status.HTTP_200_OK

    # 11-–π –∑–∞–ø–∏—Ç –º–∞—î –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–º–∏–ª–∫—É 429
    response = client.get("/api/users/me", headers={"Authorization": f"Bearer {get_token}"})
    assert response.status_code == status.HTTP_429_TOO_MANY_REQUESTS


@pytest.mark.asyncio
async def test_update_avatar_for_admin(client, get_token_admin):
    # –ó–∞–ø–∏—Ç –Ω–∞ –∑–º—ñ–Ω—É –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è –∞–¥–º—ñ–Ωa
    new_avatar = "https://new-avatar.com/avatar.png"
    response = client.patch(
        "/api/users/avatar",
        json={"new_avatar": new_avatar},
        headers={"Authorization": f"Bearer {get_token_admin}"},
    )
    print("RESPONSE STATUS:", response.status_code)
    print("RESPONSE DATA:", response.json())

    assert response.status_code == status.HTTP_200_OK


    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞
    response_data = response.json()
    assert response_data["message"] == "–ê–≤–∞—Ç–∞—Ä –æ–Ω–æ–≤–ª–µ–Ω–æ"
    assert response_data["avatar"] == new_avatar



@pytest.mark.asyncio
async def test_debug_token(client, get_token_admin):
    print(f"ü™™ Token: {get_token_admin}")
    response = client.get(
        "/api/users/me",
        headers={"Authorization": f"Bearer {get_token_admin}"},
    )
    print(response.status_code)
    print(response.json())


@pytest.mark.asyncio
async def test_update_avatar_for_non_admin(client, get_token):
    # –Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä
    new_avatar = "https://new-avatar.com/avatar.png"
    response = client.patch(
        "/api/users/avatar",
        json={"new_avatar": new_avatar},
        headers={"Authorization": f"Bearer {get_token}"},
    )

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É (403 ‚Äî –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ)
    assert response.status_code == status.HTTP_403_FORBIDDEN
    assert (
        response.json()["detail"]
        == "–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ –∑–º—ñ–Ω–∏—Ç–∏ –∞–≤–∞—Ç–∞—Ä –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º"
    )


